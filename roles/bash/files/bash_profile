# shellcheck disable=SC2148
# ============================== BASH PROFILE ==================================
addpath() {
  ARG="$1"
  if [ -d "${ARG}" ] && [[ ":${PATH}:" != *":${ARG}:"* ]]; then
    export PATH="${ARG}${PATH:+":${PATH}"}"
  fi
}

if command -v brew &> /dev/null; then
  BREW_PREFIX="$(brew --prefix)"
fi

if [ -n "${TMUX}" ] && [ -f /usr/libexec/path_helper ]; then
  export PATH=""
  source /etc/profile
fi

if [ -z "${LC_LOGINUSER}" ]; then
  if logname &> /dev/null ; then
    LC_LOGINUSER="$(logname)"
  else
    LC_LOGINUSER="$(id -un)"
  fi
  LC_LOGINHOST="$(hostname -s)"
  LC_LOGINSYSN="$(uname -s)"

  export LC_LOGINHOST
  export LC_LOGINSYSN
  export LC_LOGINUSER
fi

addpath /usr/local/sbin
addpath "${HOME}/Git/github/depot_tools"
addpath "${HOME}/.bin"
addpath "${HOME}/.bin/$(uname -s)"

if [[ "${LC_LOGINHOST}" != "$(hostname -s)" ]]; then
  addpath "${HOME}/.bin/remote_utils"
fi

if [ -d "${HOME}/.pumpkin" ]; then
  export PUMPKIN_HOME="${HOME}/.pumpkin"
fi

# Use brewed python
if [ -n "${BREW_PREFIX}" ]; then
    addpath "${BREW_PREFIX}/opt/python/libexec/bin"
    PYTHON_USER_PATH="$(python3 -c 'import site; print(site.USER_BASE)')"
    addpath "${PYTHON_USER_PATH}/bin"
fi

# Wrapper for python virtualenvs
if [ -n "${BREW_PREFIX}" ] \
     && [ -f "${BREW_PREFIX}/bin/virtualenvwrapper.sh" ]; then
  export WORKON_HOME="${HOME}/.virtualenvs"
  # These need to be set explicitly for brewed python
  export VIRTUALENVWRAPPER_PYTHON="${BREW_PREFIX}/opt/python/libexec/bin/python"
  export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
  source "${BREW_PREFIX}/bin/virtualenvwrapper.sh"
elif [ -n "${BREW_PREFIX}" ] \
    && [ -f "${PYTHON_USER_PATH}/bin/virtualenvwrapper.sh" ]; then
  export WORKON_HOME="${HOME}/.virtualenvs"
  # These need to be set explicitly for brewed python
  export VIRTUALENVWRAPPER_PYTHON="${BREW_PREFIX}/opt/python/libexec/bin/python"
  export VIRTUALENVWRAPPER_VIRTUALENV="${PYTHON_USER_PATH}/bin/virtualenv"
  source "${PYTHON_USER_PATH}/bin/virtualenvwrapper.sh"
elif [ -f /usr/share/virtualenvwrapper/virtualenvwrapper.sh ]; then
  export WORKON_HOME="${HOME}/.virtualenvs"
  source /usr/share/virtualenvwrapper/virtualenvwrapper.sh
fi

# Android stuff
if [ -n "${BREW_PREFIX}" ] && [ -d "${BREW_PREFIX}/Cellar/android-ndk-r10e/r10e" ]; then
  export ANDROID_NDK="${BREW_PREFIX}/Cellar/android-ndk-r10e/r10e"
  export NDK_HOME="${BREW_PREFIX}/Cellar/android-ndk-r10e/r10e"
fi
if [ -n "${BREW_PREFIX}" ] && [ -d "${BREW_PREFIX}/Cellar/android-sdk/22.0.5_1" ]; then
  export ANDROID_HOME="${BREW_PREFIX}/Cellar/android-sdk/22.0.5_1"
  addpath "${ANDROID_HOME}/platform-tools"
  addpath "${ANDROID_HOME}/tools"
fi

# RBEnv
if command -v rbenv &> /dev/null; then
  eval "$(rbenv init -)"
fi

# Kubernetes
if command -v kubectl &> /dev/nulll; then
  if command -v kubectl &> /dev/null; then
    alias k=kubectl
    complete -o default -F __start_kubectl k
  fi

  if [ -d "${HOME}/.kube" ]; then
    while read -r file; do
      export KUBECONFIG="${file}:${KUBECONFIG}"
    done < <(find "${HOME}/.kube" -name "config-*")
  fi
fi

# Golang
if command -v go &> /dev/null && [ -d "${HOME}/.go" ]; then
  export GOPATH="${HOME}/.go"
  addpath "${GOPATH}/bin"
  if [ -n "${BREW_PREFIX}" ]; then
    export GOROOT="${BREW_PREFIX}/opt/go/libexec"
    addpath "${GOROOT}/bin"
  fi
fi

if [ -n "${BREW_PREFIX}" ]; then
  export HOMEBREW_NO_GITHUB_API=1
  export HOMEBREW_NO_INSTALL_UPGRADE=1
fi

# Set proper path cache dir on Mac OS
if [[ "$(uname -s)" == 'Darwin' ]] && [ -d "${HOME}/Library/Caches/org.freedesktop" ]; then
  export XDG_CACHE_HOME="${HOME}/Library/Caches/org.freedesktop"
fi

# ============================ TERMINAL OPTIONS ================================

# Make vim the default editor.
export EDITOR='vim'

# Prefer US English and use UTF-8.
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'

# Set colors
if [ -f "${HOME}/.bash_colors" ]; then
  source "${HOME}/.bash_colors"
fi

# Enable colors for tools
#export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
# http://askubuntu.com/a/17300
# https://github.com/apjanke/oh-my-zsh-custom/blob/master/lscolors.zsh
# http://www.bigsoft.co.uk/blog/index.php/2008/04/11/configuring-ls_colors
if (ls --color &> /dev/null); then
  alias ls='ls --color=auto'
  export LS_COLORS='di=1;34:ln=1;36:so=1;35:pi=33;40:ex=1;32:bd=1;33;40:cd=1;33;40:su=30;43:sg=37;41:tw=37;44:ow=1;35'
else
  export CLICOLOR='Yes'
  export LSCOLORS='ExGxFxdaCxDADAadhbheFx'
  export TREE_COLORS='ln=36'
fi

if command -v bat &> /dev/null; then
  export BAT_THEME=Tomorrow-Night-Eighties
fi

# Highlight section titles in manual pages.
export LESS_TERMCAP_md="${ORANGE}"

# Put timestamps in bash history
export HISTTIMEFORMAT='%F %T '
# Don't put duplicate commands into the history
export HISTCONTROL='ignoreboth'
# Don't record these commands in the history; who cares about ls?
export HISTIGNORE='pwd:ls:ll:history:exit:bg:fg:clear'
# Store more history
export HISTSIZE=10000
export HISTFILESIZE=10000
export SHELL_SESSION_HISTORY=1
if [ -n "${PROJECT_NAME}" ]; then
  export HISTFILE="${HOME}/.bash_history_${PROJECT_NAME}"
fi
# Append to history, don't overwrite it
shopt -s histappend
# Save multiline commands as one history entry
shopt -s cmdhist

# Prevent file overwrite on stdout redirection
# Use `>|` to force redirection to an existing file
set -o noclobber
# Update window size after every command
shopt -s checkwinsize
# Prepend cd to directory names automatically
shopt -s autocd 2> /dev/null

# A setting that does its best to keep ssh connections from freezing
export AUTOSSH_POLL=30

# =============================== COMPLETIONS ==================================

# Add tab completion for many Bash commands
if [ -n "${BREW_PREFIX}" ] && [ -f "${BREW_PREFIX}/etc/profile.d/bash_completion.sh" ]; then
  export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
  source "${BREW_PREFIX}/etc/profile.d/bash_completion.sh"
elif [ -f /usr/share/bash-completion/bash_completion ]; then
  source /usr/share/bash-completion/bash_completion
elif [ -f /etc/bash_completion ]; then
  source /etc/bash_completion
fi

# Git completion
if [ -f "${HOME}/.git-completion.bash" ]; then
  source "${HOME}/.git-completion.bash"
fi

# Azure cli completion
if [ -f "${HOME}/.azure-completion.bash" ]; then
  source "${HOME}/.azure-completion.bash"
fi

# Fzf
if [ -f "${HOME}/.fzf.bash" ]; then
  source "${HOME}/.fzf.bash"
fi

# ============================== PROMPT SETUP ==================================

# Git prompt setup
if [ -f "${HOME}/.git-prompt.sh" ]; then
  source "${HOME}/.git-prompt.sh"
elif [ -f /etc/bash_completion.d/git-prompt ]; then
  source /etc/bash_completion.d/git-prompt
elif [ -f /usr/lib/git-core/git-sh-prompt ]; then
  source /usr/lib/git-core/git-sh-prompt
fi

if type -t __git_ps1 &> /dev/null; then
  export GIT_PS1_SHOWDIRTYSTATE=1
  export GIT_PS1_SHOWUNTRACKEDFILES=1
  export GIT_PS1_SHOWCOLORHINTS=1
  export GIT_PS1_SHOWUPSTREAM='auto'
fi

if [ -f "${HOME}/.bash_prompt" ]; then
  source "${HOME}/.bash_prompt"
fi

# =============================== FZF OPTIONS ==================================

export FZF_DEFAULT_COMMAND='fd --type f'

_fzf_compgen_path() {
  fd --hidden --follow --exclude '.git' . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude '.git' . "$1"
}

# ============================ HELPER FUNCTIONS ================================

# Abbreviate given path Vim style
abbrev-path() {
  p="${1#${HOME}}"
  if [[ "${1}" != "${p}" ]]; then
    echo -n '~'
  fi
  sed 's:\([^/]\)[^/]*/:\1/:g' <<< "${p}"
}

# Get statistics of used commands
commandstats() {
  history | awk '{print $4}' | awk 'BEGIN {FS="|"} {print $1}' | sort | uniq -c | sort -rn | head -30
}

# Remove stopped containers and noname images
docker-clean() {
  docker container prune -f
  docker volume prune -f
  docker images | grep '^<none>' | awk '{print $3}' | xargs docker rmi
}

# Get escape code for a character
escape() {
  printf "\\\\x%s" "$(printf '%s' "$@" | xxd -p -c1 -u)"
  # print a newline unless weâ€™re piping the output to another program
  if [ -t 1 ]; then
    echo ""
  fi
}

# Extract most know archives with one command
extract () {
  if [ -f "$1" ]; then
    case "$1" in
      *.tar.bz2) tar xjf "$1"    ;;
      *.tar.gz)  tar xzf "$1"    ;;
      *.bz2)     bunzip2 "$1"    ;;
      *.rar)     unrar e "$1"    ;;
      *.gz)      gunzip "$1"     ;;
      *.tar)     tar xf "$1"     ;;
      *.tbz2)    tar xjf "$1"    ;;
      *.tgz)     tar xzf "$1"    ;;
      *.zip)     unzip "$1"      ;;
      *.Z)       uncompress "$1" ;;
      *)         echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

# Use fzf to fuzzy find files and open with vim
fe() {
  local files
  mapfile -t files <<< "$(fzf --query="$1" --multi --select-1 --exit-0)"
  if [ ! -z "${files[*]}" ]; then
    vim "${files[@]}"
  fi
}

# Show directory structure as a tree from `pwd`
lstree() {
  local -r shortpath="$(basename "$(pwd)")"
  local -r output="$(tree -C -d --noreport "$@")"

  (
    echo "${output}" | head -n 1 | sed -e "s/^\\.$/${shortpath}/"
    echo "${output}" | tail -n "$(($(echo "${output}" | wc -l)-1))"
  ) | less -EFRSX
}

# Change sudo behaviour to preserve user profile
sudo() {
  if [[ "$*" == '-s' ]] || [[ "$*" == '-i' ]]; then
    # sudo -s invoked, replace it with login prompt
    command sudo -E bash -l
  elif [ -z "$1" ] || [[ "$1" == -* ]]; then
    # Some arguments passed to sudo, don't touch them
    command sudo "$@"
  else
    # No arguments passed to sudo, add -E
    command sudo -E "$@"
  fi
}

tmux() {
  if [ "$#" -ne 0 ]; then
    command "$(command -v tmux)" "$@"
  else
    local -r id="$(ps -p $$ -o tty= | sed -e 's/ *$//')"
    if [ -n "${id}" ]; then
      tmux attach -t "${id}" 2> /dev/null || tmux new -s "${id}"
    else
      tmux attach 2> /dev/null || tmux new
    fi
  fi
}

# ================================= ALIASES ====================================

alias cat='bat'
alias dirs='dirs -v'
alias grep='grep --color'
alias ll='ls -lAhp'
alias lr='lstree'
alias numfiles='echo $(ls -1 | wc -l)'
alias prettyjson='python -m json.tool'
alias sudo='sudo '                    # With this aliases can be used with sudo

if [[ "$(uname -s)" == 'Darwin' ]]; then
  alias f='open -a Finder ./'
  alias cask='brew cask'
  alias flushdns='sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder'
  if command -v terminal-notifier &> /dev/null; then
    alias notify='if [ $? -eq 0 ]; then terminal-notifier -message "Command finished succesfully"; else terminal-notifier -message "Command failed"; fi'
  fi
  if command -v gmkdir &> /dev/null; then
    alias mkdir='gmkdir -pv'
  fi
else
  alias mkdir='mkdir -pv'
fi


# ================================== ENV SETUP =================================

_setup_env() {
  local -r git_dir=$(git rev-parse --show-toplevel 2> /dev/null)
  if [ -z "${git_dir}" ]; then
    return
  fi

  local -r repo_dir=$(basename "${git_dir}")

  if [ -n "${WORKON_HOME}" ] \
    && [ -d "${WORKON_HOME}/${repo_dir}" ]; then
      workon "${repo_dir}"
  fi

  while [[ "$(pwd)" != '/' ]]; do
    pushd .. &> /dev/null
  done
  while popd &> /dev/null; do
    if [ -f ./.project_env ]; then
      source "$(pwd)/.project_env"
    fi
  done

  if [ -n "${TMUX}" ] && [[ "$(tmux display-message -p '#W')" != "${repo_dir}" ]]; then
    tmux rename-window "${repo_dir}"
    export PROJECT_NAME=${repo_dir}
  fi
}

_setup_env

unset -f _setup_env
unset -f addpath
unset BREW_PREFIX
unset PYTHON_USER_PATH
