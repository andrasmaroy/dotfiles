#!/bin/bash

# Log output:
#
# * cbb7e09  (13 days)  <amaroy>   Initial commit
#
# Original design by Gary Bernhardt
# https://github.com/garybernhardt/dotfiles/blob/master/.githelpers
# Added code to keep colors on the graph.
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses ASCII separator characters between each field, and
# `column` is later used to split on them.

set -euo pipefail
IFS=$'\n'

# ASCII separator characters won't ever be in commit messages
readonly FIELD_SEP="$(echo -e '\x1E')"     # Field separator
readonly GRAPH_SEP="$(echo -e '\x1F')"     # Separate the graph from the rest

readonly HASH='%C(auto)%h%C(reset)'
readonly RELATIVE_TIME='%C(green)(%ar)%C(reset)'
readonly AUTHOR='%C(bold cyan)<%an>%C(reset)'
readonly REFS='%C(auto)%d%C(reset)'
readonly SUBJECT='%<(120,trunc)%s'

readonly FORMAT="${GRAPH_SEP}${HASH}${FIELD_SEP}${RELATIVE_TIME}${FIELD_SEP}${AUTHOR}${FIELD_SEP}${REFS} ${SUBJECT}"

readonly ANSI_RED='\033[31m'
readonly ANSI_RESET='\033[0m'

show_git_head() {
    pretty_git_log -1
    git show -p --stat $*
}

show_branch_history() {
  # assume master as base branch, override with `git config githelpers.basebranch <NAME>`
  local -r base_branch="$(git config githelpers.basebranch 2> /dev/null || echo 'master')"

  if [ "$(git rev-parse --abbrev-ref HEAD)" != "${base_branch}" ]; then
    local -r branch_point="$(git show-branch --current --sha1-name --topo-order --topics --no-color 2> /dev/null | grep '^\s*\*\s*\[' | tail -n 1 | sed 's/^.*\[\([a-z0-9]*\)\].*$/\1/')^"
    pretty_git_log --ancestry-path --first-parent "${branch_point}"...HEAD
  else
    pretty_git_log --first-parent HEAD
  fi
}

pretty_git_log() {
  local -r log_output="$(git log --graph --color --pretty=tformat:"${FORMAT}" $* | sed -E "s/^(.*)$/\1$GRAPH_SEP/")"
  # Get only the graph from the beginning of the line and mark the end with a separator
  local -r graph_with_colors="$(echo "${log_output}" | cut -f 1 -d "${GRAPH_SEP}")"
  local -r graph_without_colors="$(echo "${graph_with_colors}" | sed -E $'s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g')"
  echo "${log_output}" |
    # Replace (2 years ago) with (2 years)
    sed -E 's/(^[^<]*) ago\)/\1)/' |
    # Replace (2 years, 5 months) with (2 years)
    sed -E 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
    # Color merge commits specially
    sed -E "s/(Merge ((remote-tracking )?branch(es)?|pull request) .*$)/$(printf ${ANSI_RED})\1$(printf ${ANSI_RESET})/" |
    # Temprarily remove colors from the graph, as those don't play well with `column`
    cut -f 2 -d "${GRAPH_SEP}" |
    paste -d"\0" <(echo "${graph_without_colors}" | sed -E "s/^(.*)$/\1${GRAPH_SEP}/") - |
    # Line columns up based on the separator
    column -s "${FIELD_SEP}" -t |
    # Add colors to the graph again
    cut -f 2 -d "${GRAPH_SEP}"  |
    paste -d"\0" <(echo "${graph_with_colors}") - |
    # Remove double backslashes
    sed -E 's/\\\\/\\/g' |
    # Page in a way that cuts off long lines
    less --QUIT-AT-EOF --quit-if-one-screen --RAW-CONTROL-CHARS --chop-long-lines --no-init
}

